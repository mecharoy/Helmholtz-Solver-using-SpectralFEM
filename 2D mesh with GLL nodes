#SFEM mesh
import numpy as np
import scipy.special as special
import scipy.sparse as sparse
import matplotlib.pyplot as plt

def gll_points(n):
    if n < 2:
        raise ValueError("n must be at least 2")
    if n == 2:
        return np.array([-1, 1])
    poly = special.legendre(n-1)
    der = np.polyder(poly)
    roots = np.roots(der)
    roots.sort()
    return np.concatenate(([-1], roots, [1]))

class Mesh2D:
    def __init__(self, domain, nx, ny, order_x, order_y):
        self.domain = domain
        self.nx = nx  # Number of elements in x-direction
        self.ny = ny  # Number of elements in y-direction
        self.order_x = order_x
        self.order_y = order_y
        self.nodes = None
        self.elements = None
        self.node_numbers = None

    def generate_mesh(self):
        xmin, xmax, ymin, ymax = self.domain

        # Generating GLL points in the reference element [-1, 1]
        gll_x = gll_points(self.order_x + 1)
        gll_y = gll_points(self.order_y + 1)

        # Generating element edge coordinates
        x_edges = np.linspace(xmin, xmax, self.nx + 1)
        y_edges = np.linspace(ymin, ymax, self.ny + 1)

        # Initializing nodes, elements, and node_numbers lists
        self.nodes = []
        self.elements = []
        self.node_numbers = {}
        node_count = 0

        # Generate nodes and elements
        for j in range(self.ny):
            for i in range(self.nx):
                # Element boundaries
                x_left, x_right = x_edges[i], x_edges[i+1]
                y_bottom, y_top = y_edges[j], y_edges[j+1]

                # Generating nodes for this element
                element_nodes = []
                for eta in gll_y:
                    for xi in gll_x:
                        x = 0.5 * ((x_right - x_left) * xi + x_right + x_left)
                        y = 0.5 * ((y_top - y_bottom) * eta + y_top + y_bottom)

                        # Checking if the node already exists (within a small tolerance)
                        node_key = tuple(np.round([x, y], decimals=10))
                        if node_key not in self.node_numbers:
                            self.nodes.append([x, y])
                            self.node_numbers[node_key] = node_count
                            element_nodes.append(node_count)
                            node_count += 1
                        else:
                            element_nodes.append(self.node_numbers[node_key])

                self.elements.append(element_nodes)

        self.nodes = np.array(self.nodes)

    def plot_mesh(self, show_node_numbers=True):
        plt.figure(figsize=(20, 15))

        # Plotting nodes
        plt.scatter(self.nodes[:, 0], self.nodes[:, 1], c='b', s=10)

        # Plotting elements
        for element in self.elements:
            for i in range(self.order_x + 1):
                for j in range(self.order_y):
                    idx1 = element[i + j * (self.order_x + 1)]
                    idx2 = element[i + (j + 1) * (self.order_x + 1)]
                    plt.plot(self.nodes[[idx1, idx2], 0], self.nodes[[idx1, idx2], 1], 'k-', lw=0.5)

            for j in range(self.order_y + 1):
                for i in range(self.order_x):
                    idx1 = element[i + j * (self.order_x + 1)]
                    idx2 = element[(i + 1) + j * (self.order_x + 1)]
                    plt.plot(self.nodes[[idx1, idx2], 0], self.nodes[[idx1, idx2], 1], 'k-', lw=0.5)

  
        if show_node_numbers:
            for node, number in self.node_numbers.items():
                plt.annotate(str(number), node, fontsize=6, ha='right', va='bottom')

        plt.title(f"2D SFE Mesh with GLL Points ({self.nx}x{self.ny} elements, Order {self.order_x}x{self.order_y})")
        plt.xlabel("x")
        plt.ylabel("y")
        plt.axis('equal')
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.tight_layout()
        plt.show()



# Example usage
if __name__ == "__main__":
    domain = [0, 1, 0, 1]  
    nx = 10  # Number of elements in x-direction
    ny = 10   # Number of elements in y-direction
    order_x = 7  # Order in x-direction (4 nodes per edge)
    order_y = 3  # Order in y-direction (4 nodes per edge)

    mesh = Mesh2D(domain, nx, ny, order_x, order_y)
    mesh.generate_mesh()
    mesh.plot_mesh(show_node_numbers=True)

    print(f"Total number of elements: {len(mesh.elements)}")
    print(f"Total number of nodes: {len(mesh.nodes)}")
    print(f"Number of nodes per element: {(order_x + 1) * (order_y + 1)}")
